/**
 * ARTIK Cloud API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', 'properties-reader', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ArtikCloud);
  }
}(this, function(expect, ArtikCloud) {
  'use strict';

  var propertiesReader = require('properties-reader');
  var properties = propertiesReader('./test/artik.properties');

  var api;

  beforeEach(function() {
    //var property = properties.get('user1.id');
    //console.log(properties.get('user1.id'));

    var newClient = new ArtikCloud.ApiClient();

    // Configure OAuth2 access token for authorization: artikcloud_oauth
    var artikcloud_oauth = newClient.authentications['artikcloud_oauth'];
    artikcloud_oauth.accessToken = properties.get("user1.token");

    api = new ArtikCloud.UsersApi(newClient);
    api.getApiClient
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('createUserProperties', function() {
      it('should call createUserProperties successfully', function(done) {
        //uncomment below and update the code to test createUserProperties
        //instance.createUserProperties(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUserProperties', function() {
      it('should call deleteUserProperties successfully', function(done) {
        //uncomment below and update the code to test deleteUserProperties
        //instance.deleteUserProperties(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSelf', function() {
      it('should call getSelf successfully', function(done) {
        api.getSelf(function(error, response) {
          if (error) throw error;

          //expect(response).to.be.a(ArtikCloud.InlineResponse200);
          expect(response.data.fullName).to.be(properties.get("user1.fullname"));
          expect(response.data.name).to.be(properties.get("user1.name"));

          done();
        });
      });
    });
    describe('getUserDeviceTypes', function() {
      it('should call getUserDeviceTypes successfully', function(done) {
        //uncomment below and update the code to test getUserDeviceTypes
        //instance.getUserDeviceTypes(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserDevices', function() {
      it('should call getUserDevices successfully', function(done) {
        var userId = properties.get("user1.id");
        var opts = {};

        api.getUserDevices(userId, opts, function(error, response) {
          if (error) throw error;

          console.log(response);

          done();
        });
      });
    });
    describe('getUserProperties', function() {
      it('should call getUserProperties successfully', function(done) {
        //uncomment below and update the code to test getUserProperties
        //instance.getUserProperties(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserRules', function() {
      it('should call getUserRules successfully', function(done) {
        //uncomment below and update the code to test getUserRules
        //instance.getUserRules(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserProperties', function() {
      it('should call updateUserProperties successfully', function(done) {
        //uncomment below and update the code to test updateUserProperties
        //instance.updateUserProperties(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
